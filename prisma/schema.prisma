generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LinkType {
  INSTAGRAM
  FACEBOOK
  TWITTER
  YOUTUBE
  SOUNDCLOUD
}

enum BannerSlideType {
  INFO
  ALBUM
}

model album_slide {
  id             String         @id @default(uuid())
  link           String
  cover_data_url String
  is_single      Boolean        @default(false)
  album_name     String
  album_subtitle String // Album, Single ...
  banner_slide   banner_slide[]
}

model info_slide {
  id                   String         @id @default(uuid())
  subtitle             String
  title                String
  content              String
  background_data_url  String
  background_video_url String?
  banner_slide         banner_slide[]
}

model banner_slide {
  id              String          @id @default(uuid())
  type            BannerSlideType
  order           Int
  info_slide      info_slide?     @relation(fields: [info_slide_id], references: [id])
  album_slide     album_slide?    @relation(fields: [album_slide_id], references: [id])
  organization    organization    @relation(fields: [organization_id], references: [id])
  organization_id String
  info_slide_id   String?
  album_slide_id  String?
}

model link {
  id   String   @id @default(uuid())
  url  String
  name String
  type LinkType

  organization    organization @relation(fields: [organization_id], references: [id])
  organization_id String
}

enum ThemeColors {
  DARK_GREEN
  DARK_BLUE
}

model organization {
  id                  String      @id @default(uuid())
  name                String
  description         String?
  display_name        String? // used for tab title, page title etc..
  brand_logo_data_url String? // used for ticket branding
  // TODO add favicon
  favicon_data_url    String?
  // TODO add qr brand text
  qr_brand_text       String? // used for ticket branding
  default_currency    Currency    @default(EUR)
  // TODO add theme
  theme_colors        ThemeColors @default(DARK_GREEN)
  created_at          DateTime    @default(now())
  updated_at          DateTime    @updatedAt

  events       event[]
  staff        staff[]
  venue        venue[]
  links        link[]
  banner_slide banner_slide[]
}

enum Currency {
  BGN
  EUR
  LEI
}

enum MediaType {
  VIDEO
  IMAGE
}

model media {
  id          String        @id @default(uuid())
  media_type  MediaType
  bucket_path String
  event_media event_media[]
}

model event_media {
  id       String  @id @default(uuid())
  order    Int
  event    event?  @relation(fields: [event_id], references: [id], onDelete: Cascade)
  event_id String?
  media    media   @relation(fields: [media_id], references: [id], onDelete: Cascade)
  media_id String
}

model event {
  id                 String   @id @default(uuid())
  title              String
  description        String
  date               DateTime
  external_event_url String?
  event_photos_url   String? // when event is completed
  is_published       Boolean  @default(false)
  ticket_price       Float    @default(10)
  price_currency     Currency @default(BGN)

  venue    venue  @relation(fields: [venue_id], references: [id])
  venue_id String

  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  organization    organization? @relation(fields: [organization_id], references: [id])
  organization_id String?

  poster_media event_media[]
  sold_tickets ticket[]
}

model venue {
  id          String @id @default(uuid())
  name        String
  description String
  maps_url    String
  max_guests  Int    @default(400)
  city        String
  street_addr String
  country     String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  organization    organization @relation(fields: [organization_id], references: [id])
  organization_id String

  events event[]
}

// a ticket for an event
model ticket {
  id         String    @id @default(uuid())
  price      Float
  currency   Currency  @default(BGN)
  scanned    Boolean   @default(false)
  scanned_at DateTime?

  // idx of ticket for radability in sharing purposes
  count Int @default(1)

  owner    participant @relation(fields: [owner_id], references: [id])
  owner_id String

  event    event  @relation(fields: [event_id], references: [id])
  event_id String

  order_session_id String
}

// someone who ordered one or more tickets for self and maybe others
model participant {
  id          String   @id @default(uuid())
  email       String   @unique
  name        String
  surname     String
  phone       String?
  country     String?
  city        String?
  address     String?
  postal_code String?
  state       String?
  line1       String?
  line2       String?
  tickets     ticket[]
  role        Role     @default(GUEST)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model staff {
  id       String @id @default(uuid())
  email    String @unique
  name     String
  surname  String
  password String
  role     Role
  phone    String

  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  organization    organization @relation(fields: [organization_id], references: [id])
  organization_id String
}

enum Role {
  KOKO
  ADMIN
  EVENT_MANAGER
  TICKET_SCANNER
  VIP
  FREQUENT_GUEST
  GUEST
}
